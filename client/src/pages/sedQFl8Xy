import React, { useState, useEffect } from 'react';
import { useParams, useLocation } from 'wouter';
import { useQuery } from '@tanstack/react-query';
import { Player, Game } from '@shared/schema';
import { apiRequest } from '@/lib/apiClient';
import { CACHE_KEYS } from '@/lib/cacheKeys';
import { useClub } from 'wouter';
import PageTemplate from '@/components/layout/PageTemplate';
import DragDropRosterManager from '@/components/roster/DragDropRosterManager';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { AlertCircle, Users, Calendar } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { DynamicBreadcrumbs } from '@/components/layout/DynamicBreadcrumbs';
import { Helmet } from 'react-helmet';

export default function RosterGame() {
  const params = useParams();
  const [, navigate] = useLocation();
  

  // Extract parameters from URL - always call these hooks first
  const gameId = React.useMemo(() => {
    console.log('RosterGame URL params:', params);
    if (params && params.gameId) {
      const id = parseInt(params.gameId);
      console.log('Extracted gameId from URL:', id);
      return isNaN(id) ? null : id;
    }
    return null;
  }, [params]);

  const teamId = React.useMemo(() => {
    if (params && params.teamId) {
      const id = parseInt(params.teamId);
      return isNaN(id) ? null : id;
    }
    return null;
  }, [params]);

  const [availablePlayerIds, setAvailablePlayerIds] = useState<number[]>([]);

  // Fetch ONLY the specific game we need (same approach as PlayerAvailability)
  const { data: selectedGame, isLoading: gameLoading, error: gameError } = useQuery({
    queryKey: ['game', gameId],
    queryFn: async () => {
      console.log(`RosterGame: Fetching specific game ${gameId}`);
      const result = await apiRequest('GET', `/api/games/${gameId}`) as Promise<Game>;
      console.log(`RosterGame: Game ${gameId} response:`, result);
      return result;
    },
    retry: 2,
    enabled: !!gameId,
    staleTime: 30000
  });

  // Extract teamId from URL params


  // Fetch team-specific players
  const { data: players = [], isLoading: playersLoading, error: playersError } = useQuery({
    queryKey: ['teamPlayers', teamId],
    queryFn: () => apiRequest('GET', `/api/teams/${teamId}/players`),
    enabled: !!teamId
  });

  // Load availability for this game using team-based endpoint - Stage 5
  const { data: availabilityData, isLoading: availabilityLoading } = useQuery({
    queryKey: ['availability', teamId, gameId],
    queryFn: async () => {
      if (!teamId) {
        // Fallback to legacy endpoint if no team ID
        const response = await apiRequest('GET', `/api/games/${gameId}/availability`);
        return response;
      }
      const response = await apiRequest('GET', `/api/teams/${teamId}/games/${gameId}/availability`);
      return response;
    },
    enabled: !!gameId,
    retry: 1
  });

  // Debug logging
  console.log('RosterGame Debug:', {
    gameId,
    teamId,
    selectedGame: selectedGame?.id,
    playersCount: players.length,
    isLoading: gameLoading || playersLoading || availabilityLoading,
    hasError: gameError || playersError
  });

  const isLoading = playersLoading || gameLoading || availabilityLoading;
  const hasError = playersError || gameError;

  // Set available players from availability data
  useEffect(() => {
    if (availabilityData?.availablePlayerIds) {
      setAvailablePlayerIds(availabilityData.availablePlayerIds);
    } else if (players.length > 0 && availablePlayerIds.length === 0) {
      // Fallback: all active players
      const activePlayerIds = players.filter(p => p.active).map(p => p.id);
      setAvailablePlayerIds(activePlayerIds);
    }
  }, [availabilityData, players, availablePlayerIds.length]);

  if (isLoading) {
    return <div className="flex items-center justify-center h-64">Loading...</div>;
  }

  if (hasError) {
    return (
      <Alert variant="destructive">
        <AlertCircle className="h-4 w-4" />
        <Ale