import React, { useMemo, useState, useEffect } from 'react';
import { useParams, Link } from 'wouter';
import { useQuery, useQueryClient } from '@tanstack/react-query';
import { Helmet } from 'react-helmet';
import { TEAM_NAME } from '@/lib/settings';
import { StatItemBox } from '@/components/games/StatItemBox';
import { PositionStatsBox } from '@/components/games/PositionStatsBox';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { 
  ChevronLeft, Edit, BarChart3, ClipboardList, Activity
} from 'lucide-react';
import { Separator } from '@/components/ui/separator';
import { formatDate, cn } from '@/lib/utils';
import { GameStatus, Position, POSITIONS, allGameStatuses } from '@shared/schema';
import { useToast } from '@/hooks/use-toast';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { 
  calculateGameScores, 
  getGameStatusColor 
} from '@/lib/statisticsService';
import { GameStatusButton } from '@/components/games/GameStatusButton';
import { GameDetailsStatusButton } from '@/components/games/GameDetailsStatusButton';

// Function to get opponent name
const getOpponentName = (opponents: any[], opponentId: number | null) => {
  if (!opponentId) return 'BYE Round';
  const opponent = opponents.find(o => o.id === opponentId);
  return opponent ? opponent.teamName : 'Unknown Opponent';
};

// Game status options
const gameStatusOptions = allGameStatuses.map(status => ({
  value: status,
  label: status.charAt(0).toUpperCase() + status.slice(1).replace('-', ' ')
}));

const GameDetails = () => {
  const { id } = useParams<{ id: string }>();
  const gameId = parseInt(id);
  const [quarter, setQuarter] = useState(1);
  const queryClient = useQueryClient();
  const { toast } = useToast();

  // Fetch game data
  const { data: game } = useQuery({
    queryKey: [`/api/games/${gameId}`],
    enabled: !!gameId
  });

  // Fetch roster data
  const { data: roster } = useQuery({
    queryKey: [`/api/games/${gameId}/rosters`],
    enabled: !!gameId
  });

  // Fetch players data
  const { data: players } = useQuery({
    queryKey: ['/api/players'],
  });

  // Fetch opponents data
  const { data: opponents } = useQuery({
    queryKey: ['/api/opponents'],
  });

  // Fetch game stats data
  const { data: gameStats } = useQuery({
    queryKey: [`/api/games/${gameId}/stats`],
    enabled: !!gameId
  });

  // Organize roster by quarter and position
  const rosterByQuarter = useMemo(() => {
    if (!roster) return {};
    
    return roster.reduce((acc, entry) => {
      if (!acc[entry.quarter]) {
        acc[entry.quarter] = {};
      }
      
      acc[entry.quarter][entry.position] = entry;
      return acc;
    }, {});
  }, [roster]);

  // Get quarter options (based on max quarter in rosters)
  const maxQuarter = useMemo(() => {
    if (!roster || roster.length === 0) return 4; // Default to 4 quarters
    
    const quarters = roster.map(r => r.quarter);
    return Math.max(...quarters);
  }, [roster]);

  const quarterOptions = useMemo(() => {
    const options = [];
    for (let q = 1; q <= maxQuarter; q++) {
      options.push(q);
    }
    return options;
  }, [maxQuarter]);

  // Helper function to get player name from player ID
  const getPlayerName = (playerId) => {
    if (!playerId || !players) return null;
    const player = players.find(p => p.id === playerId);
    return player ? player.displayName : null;
  };

  // Convert tailwind colors to hex
  const convertTailwindClassToHex = (tailwindClass) => {
    const bgColors = {
      'bg-red-500': '#ef4444', 
      'bg-orange-500': '#f97316',
      'bg-yellow-600': '#ca8a04',
      'bg-green-500': '#22c55e',
      'bg-emerald-600': '#059669',
      'bg-teal-600': '#0d9488',
      'bg-blue-600': '#2563eb',
      'bg-indigo-600': '#4f46e5',
      'bg-purple-600': '#9333ea',
      'bg-fuchsia-600': '#c026d3',
      'bg-pink-500': '#ec4899',
      'bg-rose-600': '#e11d48',
      'bg-sky-600': '#0284c7',
      'bg-lime-600': '#65a30d',
      'bg-amber-600': '#d97706',
      'bg-violet-600': '#7c3aed',
      'bg-stone-500': '#78716c',
    };
    
    if (tailwindClass && bgColors[tailwindClass]) {
      console.log(`Converting ${tailwindClass} to hex: ${bgColors[tailwindClass]}`);
      return bgColors[tailwindClass];
    }
    
    console.log(`No color found for ${tailwindClass}, using default #6b7280`);
    return '#6b7280'; // gray-500 as default
  };

  // Get player color from avatar color or default
  const getPlayerColor = (playerId) => {
    if (!playerId || !players) return '#6b7280';
    
    const player = players.find(p => p.id === playerId);
    if (!player || !player.avatarColor) return '#6b7280';
    
    console.log(`Using player ${playerId} avatar color: ${player.avatarColor}`);
    return player.avatarColor;
  };
  
  // Get player performance stats for display from the actual game statistics
  const getPlayerPerformanceStats = (position) => {
    const entry = rosterByQuarter[quarter]?.[position];
    if (!entry || !entry.playerId) return null;
    
    const playerName = getPlayerName(entry.playerId);
    if (!playerName) return null;
    
    // Find the statistics for this position in this quarter
    const positionStat = gameStats?.find?.(
      stat => stat.position === position && stat.quarter === quarter
    );
    
    // Return position-specific relevant statistics
    const stats = {
      // Common stats for all positions
      intercepts: positionStat?.intercepts || 0,
      badPass: positionStat?.badPass || 0,
      handlingError: positionStat?.handlingError || 0
    };
    
    // Add position-specific stats
    if (position === 'GS' || position === 'GA') {
      // Attacking positions
      return {
        playerId: entry.playerId,
        name: playerName,
        stats: {
          ...stats,
          goals: positionStat?.goalsFor || 0,
          missedGoals: positionStat?.missedGoals || 0,
          rebounds: positionStat?.rebounds || 0
        }
      };
    } else if (position === 'GD' || position === 'GK') {
      // Defending positions
      return {
        playerId: entry.playerId,
        name: playerName,
        stats: {
          ...stats,
          goalsAgainst: positionStat?.goalsAgainst || 0,
          rebounds: positionStat?.rebounds || 0,
          pickUp: positionStat?.pickUp || 0
        }
      };
    } else {
      // Mid-court positions (WA, C, WD)
      return {
        playerId: entry.playerId,
        name: playerName,
        stats: {
          ...stats,
          pickUp: positionStat?.pickUp || 0,
          rebounds: positionStat?.rebounds || 0,
          infringement: positionStat?.infringement || 0
        }
      };
    }
  };
  
  // Helper function to render position-specific stats
  const renderPositionStats = (position, playerStats) => {
    if (position === 'GS' || position === 'GA') {
      return (
        <>
          <StatItemBox label="Goals" value={playerStats.stats.goals} />
          <StatItemBox label="Missed Goals" value={playerStats.stats.missedGoals} />
          <StatItemBox label="Rebounds" value={playerStats.stats.rebounds} />
        </>
      );
    } else if (position === 'GD' || position === 'GK') {
      return (
        <>
          <StatItemBox label="Goals Against" value={playerStats.stats.goalsAgainst} />
          <StatItemBox label="Rebounds" value={playerStats.stats.rebounds} />
          <StatItemBox label="Pick Ups" value={playerStats.stats.pickUp} />
        </>
      );
    } else {
      return (
        <>
          <StatItemBox label="Pick Ups" value={playerStats.stats.pickUp} />
          <StatItemBox label="Rebounds" value={playerStats.stats.rebounds} />
          <StatItemBox label="Infringements" value={playerStats.stats.infringement} />
        </>
      );
    }
  };
  
  return (
    <div className="mt-4">
      <div className="mb-4 flex justify-center items-center">
        <div className="flex-1">
          <Link to="/games">
            <Button variant="ghost" size="sm">
              <ChevronLeft className="mr-2 h-4 w-4" />
              Back to Games
            </Button>
          </Link>
        </div>
        
        <div className="flex-1 text-center">
          <h1 className="text-2xl font-bold">
            Game Details
          </h1>
        </div>
        
        <div className="flex-1"></div>
      </div>
      
      <Helmet>
        <title>
          {game ? `${TEAM_NAME} vs ${getOpponentName(opponents || [], game.opponentId)}` : 'Game Details'}
        </title>
      </Helmet>
      
      {game && (
        <div className="flex flex-col gap-4">
          <Card>
            <CardHeader className="pb-2">
              <div className="flex justify-between items-center">
                <CardTitle className="text-xl">
                  {TEAM_NAME} vs {getOpponentName(opponents || [], game.opponentId)}
                </CardTitle>
                
                <GameDetailsStatusButton 
                  game={game} 
                  statusOptions={gameStatusOptions} 
                  gameId={gameId}
                  queryClient={queryClient}
                />
              </div>
              <CardDescription>
                {formatDate(game.date)} at {game.time} 
                {game.location && ` - ${game.location}`}
                {game.round && ` - Round ${game.round}`}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <h2 className="text-lg font-semibold mb-2">Game Information</h2>
                  <div className="space-y-1">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Date:</span>
                      <span>{formatDate(game.date)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Time:</span>
                      <span>{game.time}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Location:</span>
                      <span>{game.location || 'Not specified'}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Round:</span>
                      <span>{game.round || 'Not specified'}</span>
                    </div>
                  </div>
                </div>
                
                <div>
                  <h2 className="text-lg font-semibold mb-2">Game Status</h2>
                  <div className="space-y-1">
                    <div className="flex items-center justify-between">
                      <span className="text-gray-600">Status:</span>
                      <Badge 
                        variant="outline" 
                        className={cn("font-medium", 
                          getGameStatusColor(game.status || 'upcoming')
                        )}
                      >
                        {game.status?.charAt(0).toUpperCase() + game.status?.slice(1).replace('-', ' ')}
                      </Badge>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <div className="flex justify-between items-center">
                <CardTitle className="text-xl">
                  Quarter Scores
                </CardTitle>
                <div>
                  <Select
                    value={quarter.toString()}
                    onValueChange={(value) => setQuarter(parseInt(value))}
                  >
                    <SelectTrigger className="w-[100px]">
                      <SelectValue placeholder="Quarter" />
                    </SelectTrigger>
                    <SelectContent>
                      {quarterOptions.map((q) => (
                        <SelectItem key={q} value={q.toString()}>
                          Quarter {q}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <CardDescription>
                View the score breakdown by quarter
              </CardDescription>
            </CardHeader>
            <CardContent>
              <ScoreBreakdown gameStats={gameStats} />
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-xl">
                Court Positions & Performance
              </CardTitle>
              <CardDescription>
                Quarter {quarter} position assignments and stats
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Left column - Court diagram (half width) */}
                <div>
                  <div className="relative w-full" style={{ height: '500px', backgroundColor: '#9dd26f', borderRadius: '0.5rem' }}>
                    {/* Center circle */}
                    <div 
                      className="absolute rounded-full border-2 border-white" 
                      style={{ 
                        width: '50px', 
                        height: '50px', 
                        top: '50%', 
                        left: '50%', 
                        transform: 'translate(-50%, -50%)' 
                      }}
                    ></div>
                    
                    {/* Center line */}
                    <div 
                      className="absolute border-t-2 border-white" 
                      style={{ width: '100%', top: '50%', transform: 'translateY(-50%)' }}
                    ></div>
                    
                    {/* Goal circles - top */}
                    <div 
                      className="absolute rounded-full border-2 border-white" 
                      style={{ 
                        width: '100px', 
                        height: '100px', 
                        top: '20px', 
                        left: '50%', 
                        transform: 'translateX(-50%)' 
                      }}
                    ></div>
                    
                    {/* Goal circles - bottom */}
                    <div 
                      className="absolute rounded-full border-2 border-white" 
                      style={{ 
                        width: '100px', 
                        height: '100px', 
                        bottom: '20px', 
                        left: '50%', 
                        transform: 'translateX(-50%)' 
                      }}
                    ></div>
                    
                    {/* Third line - top third */}
                    <div 
                      className="absolute border-t-2 border-white" 
                      style={{ width: '100%', top: '33.33%' }}
                    ></div>
                    
                    {/* Third line - bottom third */}
                    <div 
                      className="absolute border-t-2 border-white" 
                      style={{ width: '100%', top: '66.66%' }}
                    ></div>
                    
                    {/* Player positions */}
                    {/* GS */}
                    {(() => {
                      const position = 'GS';
                      const entry = rosterByQuarter[quarter]?.[position];
                      const playerName = getPlayerName(entry?.playerId);
                      const playerColor = getPlayerColor(entry?.playerId);
                      
                      const x = '50%';
                      const y = '15%';
                      const textColor = playerColor ? playerColor : '#fff';
                      
                      return (
                        <div 
                          className="absolute flex flex-col items-center justify-center"
                          style={{ 
                            left: x, 
                            top: y, 
                            transform: 'translate(-50%, -50%)'
                          }}
                        >
                          <div 
                            className="w-10 h-10 rounded-full flex items-center justify-center"
                            style={{ 
                              backgroundColor: playerName ? playerColor : 'rgba(255, 255, 255, 0.3)',
                              color: playerName ? '#fff' : '#000',
                              justifyContent: 'center',
                              alignItems: 'center',
                              padding: '0.25rem'
                            }}
                          >
                            <div className="font-bold text-center text-base md:text-lg" style={{ color: textColor }}>{position}</div>
                            {playerName && (
                              <div className="text-xs md:text-sm text-center font-medium leading-tight mx-1" style={{ color: textColor }}>{playerName}</div>
                            )}
                            {!playerName && (
                              <div className="text-xs text-red-500 text-center">Unassigned</div>
                            )}
                          </div>
                        </div>
                      );
                    })()}
                    
                    {/* GA */}
                    {(() => {
                      const position = 'GA';
                      const entry = rosterByQuarter[quarter]?.[position];
                      const playerName = getPlayerName(entry?.playerId);
                      const playerColor = getPlayerColor(entry?.playerId);
                      
                      const x = '50%';
                      const y = '30%';
                      const textColor = playerColor ? playerColor : '#fff';
                      
                      return (
                        <div 
                          className="absolute flex flex-col items-center justify-center"
                          style={{ 
                            left: x, 
                            top: y, 
                            transform: 'translate(-50%, -50%)'
                          }}
                        >
                          <div 
                            className="w-10 h-10 rounded-full flex items-center justify-center"
                            style={{ 
                              backgroundColor: playerName ? playerColor : 'rgba(255, 255, 255, 0.3)',
                              color: playerName ? '#fff' : '#000',
                              justifyContent: 'center',
                              alignItems: 'center',
                              padding: '0.25rem'
                            }}
                          >
                            <div className="font-bold text-center text-base md:text-lg" style={{ color: textColor }}>{position}</div>
                            {playerName && (
                              <div className="text-xs md:text-sm text-center font-medium leading-tight mx-1" style={{ color: textColor }}>{playerName}</div>
                            )}
                            {!playerName && (
                              <div className="text-xs text-red-500 text-center">Unassigned</div>
                            )}
                          </div>
                        </div>
                      );
                    })()}
                    
                    {/* WA */}
                    {(() => {
                      const position = 'WA';
                      const entry = rosterByQuarter[quarter]?.[position];
                      const playerName = getPlayerName(entry?.playerId);
                      const playerColor = getPlayerColor(entry?.playerId);
                      
                      const x = '50%';
                      const y = '45%';
                      const textColor = playerColor ? playerColor : '#fff';
                      
                      return (
                        <div 
                          className="absolute flex flex-col items-center justify-center"
                          style={{ 
                            left: x, 
                            top: y, 
                            transform: 'translate(-50%, -50%)'
                          }}
                        >
                          <div 
                            className="w-10 h-10 rounded-full flex items-center justify-center"
                            style={{ 
                              backgroundColor: playerName ? playerColor : 'rgba(255, 255, 255, 0.3)',
                              color: playerName ? '#fff' : '#000',
                              justifyContent: 'center',
                              alignItems: 'center',
                              padding: '0.25rem'
                            }}
                          >
                            <div className="font-bold text-center text-base md:text-lg" style={{ color: textColor }}>{position}</div>
                            {playerName && (
                              <div className="text-xs md:text-sm text-center font-medium leading-tight mx-1" style={{ color: textColor }}>{playerName}</div>
                            )}
                            {!playerName && (
                              <div className="text-xs text-red-500 text-center">Unassigned</div>
                            )}
                          </div>
                        </div>
                      );
                    })()}
                    
                    {/* C */}
                    {(() => {
                      const position = 'C';
                      const entry = rosterByQuarter[quarter]?.[position];
                      const playerName = getPlayerName(entry?.playerId);
                      const playerColor = getPlayerColor(entry?.playerId);
                      
                      const x = '50%';
                      const y = '55%';
                      const textColor = playerColor ? playerColor : '#fff';
                      
                      return (
                        <div 
                          className="absolute flex flex-col items-center justify-center"
                          style={{ 
                            left: x, 
                            top: y, 
                            transform: 'translate(-50%, -50%)'
                          }}
                        >
                          <div 
                            className="w-10 h-10 rounded-full flex items-center justify-center"
                            style={{ 
                              backgroundColor: playerName ? playerColor : 'rgba(255, 255, 255, 0.3)',
                              color: playerName ? '#fff' : '#000',
                              justifyContent: 'center',
                              alignItems: 'center',
                              padding: '0.25rem'
                            }}
                          >
                            <div className="font-bold text-center text-base md:text-lg" style={{ color: textColor }}>{position}</div>
                            {playerName && (
                              <div className="text-xs md:text-sm text-center font-medium leading-tight mx-1" style={{ color: textColor }}>{playerName}</div>
                            )}
                            {!playerName && (
                              <div className="text-xs text-red-500 text-center">Unassigned</div>
                            )}
                          </div>
                        </div>
                      );
                    })()}
                    
                    {/* WD */}
                    {(() => {
                      const position = 'WD';
                      const entry = rosterByQuarter[quarter]?.[position];
                      const playerName = getPlayerName(entry?.playerId);
                      const playerColor = getPlayerColor(entry?.playerId);
                      
                      const x = '50%';
                      const y = '70%';
                      const textColor = playerColor ? playerColor : '#fff';
                      
                      return (
                        <div 
                          className="absolute flex flex-col items-center justify-center"
                          style={{ 
                            left: x, 
                            top: y, 
                            transform: 'translate(-50%, -50%)'
                          }}
                        >
                          <div 
                            className="w-10 h-10 rounded-full flex items-center justify-center"
                            style={{ 
                              backgroundColor: playerName ? playerColor : 'rgba(255, 255, 255, 0.3)',
                              color: playerName ? '#fff' : '#000',
                              justifyContent: 'center',
                              alignItems: 'center',
                              padding: '0.25rem'
                            }}
                          >
                            <div className="font-bold text-center text-base md:text-lg" style={{ color: textColor }}>{position}</div>
                            {playerName && (
                              <div className="text-xs md:text-sm text-center font-medium leading-tight mx-1" style={{ color: textColor }}>{playerName}</div>
                            )}
                            {!playerName && (
                              <div className="text-xs text-red-500 text-center">Unassigned</div>
                            )}
                          </div>
                        </div>
                      );
                    })()}
                    
                    {/* GD */}
                    {(() => {
                      const position = 'GD';
                      const entry = rosterByQuarter[quarter]?.[position];
                      const playerName = getPlayerName(entry?.playerId);
                      const playerColor = getPlayerColor(entry?.playerId);
                      
                      const x = '50%';
                      const y = '85%';
                      const textColor = playerColor ? playerColor : '#fff';
                      
                      return (
                        <div 
                          className="absolute flex flex-col items-center justify-center"
                          style={{ 
                            left: x, 
                            top: y, 
                            transform: 'translate(-50%, -50%)'
                          }}
                        >
                          <div 
                            className="w-10 h-10 rounded-full flex items-center justify-center"
                            style={{ 
                              backgroundColor: playerName ? playerColor : 'rgba(255, 255, 255, 0.3)',
                              color: playerName ? '#fff' : '#000',
                              justifyContent: 'center',
                              alignItems: 'center',
                              padding: '0.25rem'
                            }}
                          >
                            <div className="font-bold text-center text-base md:text-lg" style={{ color: textColor }}>{position}</div>
                            {playerName && (
                              <div className="text-xs md:text-sm text-center font-medium leading-tight mx-1" style={{ color: textColor }}>{playerName}</div>
                            )}
                            {!playerName && (
                              <div className="text-xs text-red-500 text-center">Unassigned</div>
                            )}
                          </div>
                        </div>
                      );
                    })()}
                    
                    {/* GK */}
                    {(() => {
                      const position = 'GK';
                      const entry = rosterByQuarter[quarter]?.[position];
                      const playerName = getPlayerName(entry?.playerId);
                      const playerColor = getPlayerColor(entry?.playerId);
                      
                      const x = '50%';
                      const y = '95%';
                      const textColor = playerColor ? playerColor : '#fff';
                      
                      return (
                        <div 
                          className="absolute flex flex-col items-center justify-center"
                          style={{ 
                            left: x, 
                            top: y, 
                            transform: 'translate(-50%, -50%)'
                          }}
                        >
                          <div 
                            className="w-10 h-10 rounded-full flex items-center justify-center"
                            style={{ 
                              backgroundColor: playerName ? playerColor : 'rgba(255, 255, 255, 0.3)',
                              color: playerName ? '#fff' : '#000',
                              justifyContent: 'center',
                              alignItems: 'center',
                              padding: '0.25rem'
                            }}
                          >
                            <div className="font-bold text-center text-base md:text-lg" style={{ color: textColor }}>{position}</div>
                            {playerName && (
                              <div className="text-xs md:text-sm text-center font-medium leading-tight mx-1" style={{ color: textColor }}>{playerName}</div>
                            )}
                            {!playerName && (
                              <div className="text-xs text-red-500 text-center">Unassigned</div>
                            )}
                          </div>
                        </div>
                      );
                    })()}
                  </div>
                </div>
                
                {/* Right column - Roster positions with stats (half width) */}
                <div>
                  <div className="flex flex-col space-y-0 justify-between h-full">
                    {/* Top third - Attack positions (GS, GA) */}
                    <div className="flex space-x-3 my-3 items-start" style={{ height: '33%' }}>
                      {POSITIONS.slice(0, 2).map(position => {
                        const entry = rosterByQuarter[quarter]?.[position];
                        const playerName = getPlayerName(entry?.playerId);
                        const playerColor = getPlayerColor(entry?.playerId);
                        const playerStats = getPlayerPerformanceStats(position);
                        
                        return (
                          <div 
                            key={position} 
                            className="p-3 border rounded-md shadow-sm flex-1 flex flex-col"
                            style={{ 
                              backgroundColor: playerName ? `${playerColor}10` : 'white',
                              border: playerName ? `2px solid ${playerColor}` : '1px solid #ddd',
                            }}
                          >
                            
                            {playerName && playerStats && (
                              <div className="mt-1 bg-gray-50 p-3 rounded-md border border-gray-100">
                                <div className="flex flex-col space-y-2 text-sm">
                                  {/* Position-specific stats for attackers */}
                                  <div className="space-y-2">
                                    <StatItemBox label="Goals" value={playerStats.stats.goals} />
                                    <StatItemBox label="Missed Goals" value={playerStats.stats.missedGoals} />
                                    <StatItemBox label="Rebounds" value={playerStats.stats.rebounds} />
                                  </div>
                                  
                                  {/* Common stats for all positions */}
                                  <div className="space-y-2 mt-2 pt-2 border-t">
                                    <StatItemBox label="Intercepts" value={playerStats.stats.intercepts} />
                                    <StatItemBox label="Bad Pass" value={playerStats.stats.badPass} />
                                    <StatItemBox label="Handling Errors" value={playerStats.stats.handlingError} />
                                  </div>
                                </div>
                              </div>
                            )}
                          </div>
                        );
                      })}
                    </div>
                    
                    {/* Middle third - Mid-court positions (WA, C, WD) */}
                    <div className="flex space-x-3 my-3 items-start" style={{ height: '33%' }}>
                      {POSITIONS.slice(2, 5).map(position => {
                        const entry = rosterByQuarter[quarter]?.[position];
                        const playerName = getPlayerName(entry?.playerId);
                        const playerColor = getPlayerColor(entry?.playerId);
                        const playerStats = getPlayerPerformanceStats(position);
                        
                        return (
                          <div 
                            key={position} 
                            className="p-3 border rounded-md shadow-sm flex-1 flex flex-col"
                            style={{ 
                              backgroundColor: playerName ? `${playerColor}10` : 'white',
                              border: playerName ? `2px solid ${playerColor}` : '1px solid #ddd',
                            }}
                          >
                            
                            {playerName && playerStats && (
                              <div className="mt-1 bg-gray-50 p-3 rounded-md border border-gray-100">
                                <div className="flex flex-col space-y-2 text-sm">
                                  {/* Left stats column */}
                                  <div className="space-y-2">
                                    <div className="flex justify-between">
                                      <div className="flex justify-between w-full">
                                        <span className="text-gray-600">Goals</span>
                                        <span className="font-semibold">{playerStats.stats.goals}</span>
                                      </div>
                                    </div>
                                    <div className="flex justify-between">
                                      <div className="flex justify-between w-full">
                                        <span className="text-gray-600">Rebounds</span>
                                        <span className="font-semibold">{playerStats.stats.rebounds}</span>
                                      </div>
                                    </div>
                                  </div>
                                  
                                  {/* Right stats column */}
                                  <div className="space-y-2">
                                    <div className="flex justify-between">
                                      <div className="flex justify-between w-full">
                                        <span className="text-gray-600">Int</span>
                                        <span className="font-semibold">{playerStats.stats.intercepts}</span>
                                      </div>
                                    </div>
                                    <div className="flex justify-between">
                                      <div className="flex justify-between w-full">
                                        <span className="text-gray-600">Assists</span>
                                        <span className="font-semibold">{playerStats.stats.assists}</span>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            )}
                          </div>
                        );
                      })}
                    </div>
                    
                    {/* Bottom third - Defense positions (GD, GK) */}
                    <div className="flex space-x-3 my-3 items-start" style={{ height: '33%' }}>
                      {POSITIONS.slice(5, 7).map(position => {
                        const entry = rosterByQuarter[quarter]?.[position];
                        const playerName = getPlayerName(entry?.playerId);
                        const playerColor = getPlayerColor(entry?.playerId);
                        const playerStats = getPlayerPerformanceStats(position);
                        
                        return (
                          <div 
                            key={position} 
                            className="p-3 border rounded-md shadow-sm flex-1 flex flex-col"
                            style={{ 
                              backgroundColor: playerName ? `${playerColor}10` : 'white',
                              border: playerName ? `2px solid ${playerColor}` : '1px solid #ddd',
                            }}
                          >
                            
                            {playerName && playerStats && (
                              <div className="mt-1 bg-gray-50 p-3 rounded-md border border-gray-100">
                                <div className="flex flex-col space-y-2 text-sm">
                                  {/* Left stats column */}
                                  <div className="space-y-2">
                                    <div className="flex justify-between">
                                      <div className="flex justify-between w-full">
                                        <span className="text-gray-600">Goals</span>
                                        <span className="font-semibold">{playerStats.stats.goals}</span>
                                      </div>
                                    </div>
                                    <div className="flex justify-between">
                                      <div className="flex justify-between w-full">
                                        <span className="text-gray-600">Rebounds</span>
                                        <span className="font-semibold">{playerStats.stats.rebounds}</span>
                                      </div>
                                    </div>
                                  </div>
                                  
                                  {/* Right stats column */}
                                  <div className="space-y-2">
                                    <div className="flex justify-between">
                                      <div className="flex justify-between w-full">
                                        <span className="text-gray-600">Int</span>
                                        <span className="font-semibold">{playerStats.stats.intercepts}</span>
                                      </div>
                                    </div>
                                    <div className="flex justify-between">
                                      <div className="flex justify-between w-full">
                                        <span className="text-gray-600">Assists</span>
                                        <span className="font-semibold">{playerStats.stats.assists}</span>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            )}
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-xl">
                Game Scores
              </CardTitle>
              <CardDescription>
                Final and quarter-by-quarter scores
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="p-4 bg-gray-50 rounded-lg">
                <QuarterScoreBreakdown quarterScores={calculateGameScores(gameStats)} />
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
};

const ScoreBreakdown = ({ gameStats }) => {
  if (!gameStats || gameStats.length === 0) {
    return <div className="text-gray-500">No game statistics available</div>;
  }

  // Calculate total goals for/against
  const totals = gameStats.reduce((acc, stat) => {
    const goalsFor = stat.goalsFor || 0;
    const goalsAgainst = stat.goalsAgainst || 0;
    
    acc.goalsFor += goalsFor;
    acc.goalsAgainst += goalsAgainst;
    
    // Track by quarter
    if (!acc.byQuarter[stat.quarter]) {
      acc.byQuarter[stat.quarter] = { goalsFor: 0, goalsAgainst: 0 };
    }
    
    acc.byQuarter[stat.quarter].goalsFor += goalsFor;
    acc.byQuarter[stat.quarter].goalsAgainst += goalsAgainst;
    
    return acc;
  }, { goalsFor: 0, goalsAgainst: 0, byQuarter: {} });

  // Convert to array and sort by quarter
  const quarterScores = Object.entries(totals.byQuarter).map(([quarter, scores]) => ({
    quarter: parseInt(quarter),
    ...scores
  })).sort((a, b) => a.quarter - b.quarter);

  return (
    <div>
      <div className="grid grid-cols-4 gap-4 mb-4">
        {quarterScores.map(score => (
          <div key={score.quarter} className="bg-gray-50 p-4 rounded-lg text-center">
            <div className="text-gray-500 text-sm">Q{score.quarter}</div>
            <div className="text-xl font-bold">{score.goalsFor} - {score.goalsAgainst}</div>
          </div>
        ))}
      </div>
      
      <Separator className="my-4" />
      
      <div className="flex justify-between items-center">
        <div className="text-gray-600">Final Score:</div>
        <div className="text-xl font-bold">{totals.goalsFor} - {totals.goalsAgainst}</div>
      </div>
    </div>
  );
};

const QuarterScoreBreakdown = ({ quarterScores }) => {
  // Calculate quarter-by-quarter score differential
  const quarters = quarterScores.reduce((acc, current, index) => {
    acc.push({
      quarter: index + 1,
      teamScore: current.goalsFor,
      opponentScore: current.goalsAgainst,
      differential: current.goalsFor - current.goalsAgainst
    });
    return acc;
  }, []);

  // Calculate running totals
  const runningTotal = {
    teamScore: quarters.reduce((sum, q) => sum + q.teamScore, 0),
    opponentScore: quarters.reduce((sum, q) => sum + q.opponentScore, 0)
  };

  const result = runningTotal.teamScore > runningTotal.opponentScore ? 'Win' : 
                (runningTotal.teamScore < runningTotal.opponentScore ? 'Loss' : 'Draw');

  return (
    <div>
      <div className="grid grid-cols-4 gap-2 mb-4 text-sm font-medium">
        <div>Quarter</div>
        <div>Team</div>
        <div>Opponent</div>
        <div>+/-</div>
      </div>
      
      {quarters.map(score => (
        <div key={score.quarter} className="grid grid-cols-4 gap-2 py-2 border-b last:border-0">
          <div>Q{score.quarter}</div>
          <div>{score.teamScore}</div>
          <div>{score.opponentScore}</div>
          <div className={score.differential > 0 ? 'text-green-600' : score.differential < 0 ? 'text-red-600' : ''}>
            {score.differential > 0 ? '+' : ''}{score.differential}
          </div>
        </div>
      ))}
      
      <div className="grid grid-cols-4 gap-2 py-2 mt-2 font-bold">
        <div>Total</div>
        <div>{runningTotal.teamScore}</div>
        <div>{runningTotal.opponentScore}</div>
        <div className={runningTotal.teamScore - runningTotal.opponentScore > 0 ? 'text-green-600' : 
                        runningTotal.teamScore - runningTotal.opponentScore < 0 ? 'text-red-600' : ''}>
          {runningTotal.teamScore - runningTotal.opponentScore > 0 ? '+' : ''}
          {runningTotal.teamScore - runningTotal.opponentScore} ({result})
        </div>
      </div>
    </div>
  );
};

export default GameDetails;